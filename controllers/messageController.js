const axios = require('axios');
const { extractBankInfoFromImage } = require('../utils/openai');
const { getDownloadLink, logMessage } = require('../utils/telegramUtils');
const { 
  formatSmart, 
  formatRateValue, 
  isMathExpression, 
  isSingleNumber, 
  isTrc20Address,
  formatTelegramMessage
} = require('../utils/formatter');

const Group = require('../models/Group');
const Transaction = require('../models/Transaction');
const Card = require('../models/Card');
const User = require('../models/User');
const Config = require('../models/Config');
const MessageLog = require('../models/MessageLog');

// H√†m x·ª≠ l√Ω tin nh·∫Øn ch√≠nh
const handleMessage = async (bot, msg, cache) => {
  try {
    // Log message to database
    await logMessage(msg, process.env.TELEGRAM_BOT_TOKEN, MessageLog);
    
    // Log tin nh·∫Øn v√†o console ƒë·ªÉ debug
    console.log('Received message:', JSON.stringify(msg, null, 2));
    
    // L·∫•y th√¥ng tin c∆° b·∫£n t·ª´ tin nh·∫Øn
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username || msg.from.first_name || 'unknown';
    const firstName = msg.from.first_name || '';
    const lastName = msg.from.last_name || '';
    const timestamp = new Date();
    const messageText = msg.text || '';
    
    // X·ª≠ l√Ω th√†nh vi√™n m·ªõi tham gia nh√≥m
    if (msg.new_chat_members) {
      const newMembers = msg.new_chat_members;
      for (const member of newMembers) {
        await sendWelcomeMessage(bot, chatId, member);
      }
      return;
    }
    
    // X·ª≠ l√Ω c√°c l·ªánh li√™n quan ƒë·∫øn ·∫£nh
    if (msg.photo) {
      if (msg.caption && msg.caption.startsWith('/c')) {
        await handleImageBankInfo(bot, msg);
        return;
      }
    }
    
    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng reply m·ªôt tin nh·∫Øn c√≥ ·∫£nh
    if (msg.reply_to_message && msg.reply_to_message.photo && msg.text && msg.text.startsWith('/c')) {
      await handleReplyImageBankInfo(bot, msg);
      return;
    }
    
    // N·∫øu kh√¥ng c√≥ vƒÉn b·∫£n, kh√¥ng x·ª≠ l√Ω
    if (!msg.text) {
      return;
    }
    
    // Ki·ªÉm tra v√† ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
    await checkAndRegisterUser(userId, username, firstName, lastName);
    
    // X·ª≠ l√Ω c√°c l·ªánh ti·∫øng Trung
    if (messageText === '‰∏äËØæ') {
      await handleClearCommand(bot, chatId, userId, firstName);
      return;
    }
    
    if (messageText === 'ÁªìÊùü') {
      await handleReportCommand(bot, chatId, firstName);
      return;
    }
    
    if (messageText.startsWith('ËÆæÁΩÆË¥πÁéá')) {
      await handleRateCommand(bot, msg);
      return;
    }
    
    if (messageText.startsWith('ËÆæÁΩÆÊ±áÁéá')) {
      await handleExchangeRateCommand(bot, msg);
      return;
    }
    
    if (messageText.startsWith('‰∏ãÂèë')) {
      await handlePercentCommand(bot, msg);
      return;
    }
    
    // Gi·ªØ l·∫°i ki·ªÉm tra owner cho c√°c l·ªánh qu·∫£n tr·ªã
    if (messageText.startsWith('Âä†Êìç‰Ωú‰∫∫')) {
      if (await isUserOwner(userId)) {
        await handleAddOperatorCommand(bot, msg);
      } else {
        bot.sendMessage(chatId, "‚õî Âè™ÊúâÊú∫Âô®‰∫∫ÊâÄÊúâËÄÖÊâçËÉΩ‰ΩøÁî®Ê≠§ÂëΩ‰ª§ÔºÅ");
      }
      return;
    }
    
    if (messageText.startsWith('ÁßªÈô§Êìç‰Ωú‰∫∫')) {
      if (await isUserOwner(userId)) {
        await handleRemoveOperatorCommand(bot, msg);
      } else {
        bot.sendMessage(chatId, "‚õî Âè™ÊúâÊú∫Âô®‰∫∫ÊâÄÊúâËÄÖÊâçËÉΩ‰ΩøÁî®Ê≠§ÂëΩ‰ª§ÔºÅ");
      }
      return;
    }
    
    // X·ª≠ l√Ω c√°c l·ªánh b·∫Øt ƒë·∫ßu b·∫±ng "/"
    if (messageText.startsWith('/')) {
      if (messageText === '/start') {
        bot.sendMessage(chatId, "Ê¨¢Ëøé‰ΩøÁî®‰∫§ÊòìÁÆ°ÁêÜÊú∫Âô®‰∫∫ÔºÅ");
        return;
      }
      
      if (messageText === '/off') {
        bot.sendMessage(chatId, "ÊÑüË∞¢Â§ßÂÆ∂ÁöÑËæõÂã§‰ªòÂá∫ÔºåÁ•ùÂ§ßÂÆ∂ÂèëË¥¢ÔºÅ üí∞üí∏üçÄ");
        return;
      }
      
      if (messageText.startsWith('/m ')) {
        await handleCurrencyUnitCommand(bot, msg);
        return;
      }
      
      if (messageText.startsWith('/t ')) {
        await handleCalculateUsdtCommand(bot, msg);
        return;
      }
      
      if (messageText.startsWith('/v ')) {
        await handleCalculateVndCommand(bot, msg);
        return;
      }
      
      if (messageText.startsWith('/d ')) {
        await handleDualRateCommand(bot, msg);
        return;
      }
      
      if (messageText.startsWith('/x ')) {
        await handleHideCardCommand(bot, msg);
        return;
      }
      
      if (messageText.startsWith('/sx ')) {
        await handleShowCardCommand(bot, msg);
        return;
      }
      
      if (messageText === '/hiddenCards') {
        await handleListHiddenCardsCommand(bot, msg);
        return;
      }
      
      if (messageText.startsWith('/delete')) {
        await handleDeleteCommand(bot, msg);
        return;
      }
      
      // Gi·ªØ l·∫°i ki·ªÉm tra owner cho l·ªánh thi·∫øt l·∫≠p ƒë·ªãa ch·ªâ USDT
      if (messageText.startsWith('/usdt ')) {
        if (await isUserOwner(userId)) {
          await handleSetUsdtAddressCommand(bot, msg);
        } else {
          bot.sendMessage(chatId, "‚õî Âè™ÊúâÊú∫Âô®‰∫∫ÊâÄÊúâËÄÖÊâçËÉΩ‰ΩøÁî®Ê≠§ÂëΩ‰ª§ÔºÅ");
        }
        return;
      }
      
      if (messageText === '/u') {
        await handleGetUsdtAddressCommand(bot, msg);
        return;
      }
      
      if (messageText === '/users') {
        await handleListUsersCommand(bot, msg);
        return;
      }
      
      if (messageText === '/report') {
        await handleReportCommand(bot, chatId, firstName);
        return;
      }
      
      // Gi·ªØ l·∫°i ki·ªÉm tra owner cho l·ªánh setowner
      if (messageText.startsWith('/setowner')) {
        if (await isUserOwner(userId)) {
          await handleSetOwnerCommand(bot, msg);
        } else {
          bot.sendMessage(chatId, "‚õî Âè™ÊúâÊú∫Âô®‰∫∫ÊâÄÊúâËÄÖÊâçËÉΩ‰ΩøÁî®Ê≠§ÂëΩ‰ª§ÔºÅ");
        }
        return;
      }
      
      // Gi·ªØ l·∫°i ki·ªÉm tra owner cho l·ªánh remove
      if (messageText.startsWith('/remove ')) {
        if (await isUserOwner(userId)) {
          await handleRemoveCommand(bot, msg);
        } else {
          bot.sendMessage(chatId, "‚õî Âè™ÊúâÊú∫Âô®‰∫∫ÊâÄÊúâËÄÖÊâçËÉΩ‰ΩøÁî®Ê≠§ÂëΩ‰ª§ÔºÅ");
        }
        return;
      }
      
      // Gi·ªØ l·∫°i ki·ªÉm tra owner cho l·ªánh migrate
      if (messageText === '/migrate') {
        if (await isUserOwner(userId)) {
          await handleMigrateDataCommand(bot, msg);
        } else {
          bot.sendMessage(chatId, "‚õî Âè™ÊúâÊú∫Âô®‰∫∫ÊâÄÊúâËÄÖÊâçËÉΩ‰ΩøÁî®Ê≠§ÂëΩ‰ª§ÔºÅ");
        }
        return;
      }
    }
    
    // X·ª≠ l√Ω tin nh·∫Øn + v√† -
    if (messageText.startsWith('+')) {
      await handlePlusCommand(bot, msg);
      return;
    }
    
    if (messageText.startsWith('-')) {
      await handleMinusCommand(bot, msg);
      return;
    }
    
    // X·ª≠ l√Ω bi·ªÉu th·ª©c to√°n h·ªçc
    if (isMathExpression(messageText)) {
      if (!isSingleNumber(messageText)) {
        await handleMathExpression(bot, chatId, messageText, firstName);
        return;
      }
    }
    
    // X·ª≠ l√Ω ƒë·ªãa ch·ªâ TRC20
    if (isTrc20Address(messageText.trim())) {
      await handleTrc20Address(bot, chatId, messageText.trim(), firstName);
      return;
    }
    
  } catch (error) {
    console.error('Error in handleMessage:', error);
  }
};

// H√†m ki·ªÉm tra v√† ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
const checkAndRegisterUser = async (userId, username, firstName, lastName) => {
  try {
    let user = await User.findOne({ userId: userId.toString() });
    
    if (!user) {
      // Ki·ªÉm tra xem ƒë√£ c√≥ owner ch∆∞a
      const ownerExists = await User.findOne({ isOwner: true });
      
      // N·∫øu ch∆∞a c√≥ owner, user ƒë·∫ßu ti√™n s·∫Ω l√† owner
      const isFirstUser = !ownerExists;
      
      user = new User({
        userId: userId.toString(),
        username,
        firstName,
        lastName,
        isOwner: isFirstUser
      });
      
      await user.save();
      
      if (isFirstUser) {
        console.log(`User ${username} (ID: ${userId}) is now the bot owner`);
      }
    }
    
    return user;
  } catch (error) {
    console.error('Error in checkAndRegisterUser:', error);
    return null;
  }
};

// H√†m ki·ªÉm tra quy·ªÅn h·∫°n owner - ch·ªâ gi·ªØ l·∫°i owner cho b·∫£o tr√¨ h·ªá th·ªëng
const isUserOwner = async (userId) => {
  try {
    const user = await User.findOne({ userId: userId.toString() });
    return user && user.isOwner;
  } catch (error) {
    console.error('Error in isUserOwner:', error);
    return false;
  }
};

// H√†m ki·ªÉm tra quy·ªÅn h·∫°n s·ª≠ d·ª•ng - lu√¥n tr·∫£ v·ªÅ true ƒë·ªÉ cho ph√©p t·∫•t c·∫£ ng∆∞·ªùi d√πng
const isUserAuthorized = async (userId, username, chatId) => {
  return true; // Cho ph√©p t·∫•t c·∫£ ng∆∞·ªùi d√πng s·ª≠ d·ª•ng bot
};

// H√†m g·ª≠i tin nh·∫Øn ch√†o m·ª´ng
const sendWelcomeMessage = async (bot, chatId, member) => {
  const welcomeName = member.first_name;
  const welcomeMessage = `Ê¨¢Ëøé ${welcomeName} Âä†ÂÖ•Áæ§ÁªÑÔºÅ! üéâ`;
  bot.sendMessage(chatId, welcomeMessage);
};

// Ph·∫ßn c√≤n l·∫°i c·ªßa file s·∫Ω import c√°c controller kh√°c
const { 
  handleClearCommand,
  handleRateCommand,
  handleExchangeRateCommand,
  handleDualRateCommand,
  handleDeleteCommand
} = require('./groupCommands');

const {
  handlePlusCommand,
  handleMinusCommand,
  handlePercentCommand
} = require('./transactionCommands');

const {
  handleHideCardCommand,
  handleShowCardCommand,
  handleListHiddenCardsCommand
} = require('./cardCommands');

const {
  handleAddOperatorCommand,
  handleRemoveOperatorCommand,
  handleListUsersCommand,
  handleCurrencyUnitCommand,
  handleSetUsdtAddressCommand,
  handleGetUsdtAddressCommand,
  handleSetOwnerCommand,
  handleRemoveCommand,
  handleMigrateDataCommand
} = require('./userCommands');

const {
  handleCalculateUsdtCommand,
  handleCalculateVndCommand,
  handleMathExpression,
  handleTrc20Address,
  handleReportCommand
} = require('./utilCommands');

const {
  handleImageBankInfo,
  handleReplyImageBankInfo
} = require('./imageCommands');

module.exports = {
  handleMessage
}; 