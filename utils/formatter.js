/**
 * ƒê·ªãnh d·∫°ng s·ªë th√¥ng minh: kh√¥ng c√≥ d·∫•u ph·∫©y ph·∫ßn ngh√¨n, d·∫•u ch·∫•m ph·∫ßn th·∫≠p ph√¢n
 * @param {Number} num - S·ªë c·∫ßn ƒë·ªãnh d·∫°ng
 * @param {String} format - Lo·∫°i format ('default' ho·∫∑c 'formatted')
 * @returns {String} - Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng
 */
const formatSmart = (num, format = 'default') => {
  if (format === 'formatted') {
    return formatNumberWithCommas(num);
  }
  
  const floorVal = Math.floor(Math.abs(num));
  const fraction = Math.abs(num) - floorVal;
  
  if (fraction < 1e-9) {
    // S·ªë nguy√™n: ch·ªâ hi·ªÉn th·ªã s·ªë kh√¥ng c√≥ ƒë·ªãnh d·∫°ng
    return Math.round(num).toString();
  } else {
    // S·ªë th·∫≠p ph√¢n: hi·ªÉn th·ªã v·ªõi 2 ch·ªØ s·ªë sau d·∫•u ch·∫•m
    return num.toFixed(2);
  }
};

/**
 * ƒê·ªãnh d·∫°ng s·ªë c√≥ d·∫•u ph·∫©y ngƒÉn c√°ch h√†ng ngh√¨n v√† d·∫•u ch·∫•m th·∫≠p ph√¢n
 * @param {Number} num - S·ªë c·∫ßn ƒë·ªãnh d·∫°ng
 * @returns {String} - Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng v·ªõi d·∫•u ph·∫©y
 */
const formatNumberWithCommas = (num) => {
  const floorVal = Math.floor(Math.abs(num));
  const fraction = Math.abs(num) - floorVal;
  
  let result = '';
  
  if (fraction < 1e-9) {
    // S·ªë nguy√™n: th√™m d·∫•u ph·∫©y ngƒÉn c√°ch h√†ng ngh√¨n
    result = Math.round(num).toLocaleString('en-US');
  } else {
    // S·ªë th·∫≠p ph√¢n: th√™m d·∫•u ph·∫©y v√† hi·ªÉn th·ªã 2 ch·ªØ s·ªë sau d·∫•u ch·∫•m
    result = num.toLocaleString('en-US', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  }
  
  return result;
};

/**
 * ƒê·ªãnh d·∫°ng gi√° tr·ªã t·ª∑ l·ªá (rate)
 * @param {Number} num - S·ªë c·∫ßn ƒë·ªãnh d·∫°ng
 * @returns {String} - Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng
 */
const formatRateValue = (num) => {
  // ƒê·∫£m b·∫£o num l√† s·ªë
  num = parseFloat(num);
  if (isNaN(num)) {
    return "0";
  }
  
  // N·∫øu l√† s·ªë nguy√™n, tr·∫£ v·ªÅ kh√¥ng c√≥ s·ªë th·∫≠p ph√¢n
  if (Number.isInteger(num)) {
    return num.toString();
  }
  
  // N·∫øu l√† s·ªë th·∫≠p ph√¢n, lo·∫°i b·ªè c√°c s·ªë 0 ·ªü cu·ªëi
  return num.toString().replace(/\.?0+$/, '');
};

/**
 * Ki·ªÉm tra xem chu·ªói c√≥ ph·∫£i bi·ªÉu th·ª©c to√°n h·ªçc h·ª£p l·ªá kh√¥ng
 * @param {String} msg - Chu·ªói c·∫ßn ki·ªÉm tra
 * @returns {Boolean} - true n·∫øu l√† bi·ªÉu th·ª©c to√°n h·ªçc
 */
const isMathExpression = (msg) => {
  const mathRegex = /^[0-9+\-*/().\s]+$/;
  return mathRegex.test(msg);
};

/**
 * Ki·ªÉm tra xem chu·ªói c√≥ ph·∫£i l√† m·ªôt s·ªë ƒë∆°n gi·∫£n kh√¥ng
 * @param {String} msg - Chu·ªói c·∫ßn ki·ªÉm tra
 * @returns {Boolean} - true n·∫øu l√† s·ªë ƒë∆°n gi·∫£n
 */
const isSingleNumber = (msg) => {
  const numberRegex = /^-?\d+(\.\d+)?$/;
  return numberRegex.test(msg.trim());
};

/**
 * Ki·ªÉm tra xem chu·ªói c√≥ ph·∫£i l√† ƒë·ªãa ch·ªâ TRC20 h·ª£p l·ªá kh√¥ng
 * @param {String} str - Chu·ªói c·∫ßn ki·ªÉm tra
 * @returns {Boolean} - true n·∫øu l√† ƒë·ªãa ch·ªâ TRC20 h·ª£p l·ªá
 */
const isTrc20Address = (str) => {
  const re = /^T[1-9A-Za-z]{33}$/;
  return re.test(str);
};

/**
 * Format date in US style (MM/DD/YYYY)
 * @param {Date} date - Date to format
 * @returns {String} - Formatted date string
 */
const formatDateUS = (date) => {
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  const year = date.getFullYear();
  return `${year}/${month}/${day}`;
};

/**
 * ƒê·ªãnh d·∫°ng th·ªùi gian theo ƒë·ªãnh d·∫°ng 24h (HH:mm:ss) theo m√∫i gi·ªù Campuchia (Asia/Phnom_Penh)
 * @param {Date} date - ƒê·ªëi t∆∞·ª£ng ng√†y c·∫ßn ƒë·ªãnh d·∫°ng
 * @returns {String} - Chu·ªói th·ªùi gian ƒë√£ ƒë·ªãnh d·∫°ng (v√≠ d·ª•: 14:05:00)
 */
const formatTimeString = (date) => {
  return date.toLocaleTimeString('en-US', { timeZone: 'Asia/Phnom_Penh', hour12: false });
};

/**
 * L·∫•y ƒë·ªãnh d·∫°ng s·ªë c·ªßa ng∆∞·ªùi d√πng theo nh√≥m
 */
const getUserNumberFormat = async (userId, chatId) => {
  try {
    const User = require('../models/User');
    const user = await User.findOne({ userId: userId.toString() });
    
    if (!user) return 'default';
    
    // T√¨m c√†i ƒë·∫∑t cho nh√≥m c·ª• th·ªÉ
    const groupSetting = user.groupPermissions.find(gp => gp.chatId === chatId.toString());
    
    return groupSetting ? groupSetting.numberFormat : 'default';
  } catch (error) {
    console.error('Error getting user number format:', error);
    return 'default';
  }
};

/**
 * L·∫•y ƒë·ªãnh d·∫°ng s·ªë chung c·ªßa nh√≥m
 */
const getGroupNumberFormat = async (chatId) => {
  try {
    const Group = require('../models/Group');
    const group = await Group.findOne({ chatId: chatId.toString() });
    
    return group ? group.numberFormat : 'default';
  } catch (error) {
    console.error('Error getting group number format:', error);
    return 'default';
  }
};

/**
 * T·∫°o tin nh·∫Øn telegram kh√¥ng s·ª≠ d·ª•ng markdown
 * @param {Object} jsonData - D·ªØ li·ªáu c·∫ßn format
 * @param {String} numberFormat - ƒê·ªãnh d·∫°ng s·ªë ('default' ho·∫∑c 'formatted')
 * @returns {String} - Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng
 */
const formatTelegramMessage = (jsonData, numberFormat = 'default') => {
  let output = '';
  
  // Date header - using US format (MM/DD/YYYY)
  const currentDate = new Date();
  const formattedDate = formatDateUS(currentDate);
  output += `*${formattedDate}:*\n`;
  
  // Deposits section
  if (jsonData.depositData && jsonData.depositData.entries && jsonData.depositData.entries.length > 0) {
    const depositCount = jsonData.depositData.totalCount || jsonData.depositData.entries.length;
    output += `*Â∑≤ÂÖ•Ë¥¶* (${depositCount}Á¨î):\n`;
    
    // Format giao d·ªãch v·ªõi ID v√† link
    jsonData.depositData.entries.forEach((entry) => {
      // S·ª≠ d·ª•ng ID t·ª´ entry thay v√¨ t·∫°o ID m·ªõi
      const id = entry.id || (entry.index + 1);
      if (entry.messageId && entry.chatLink) {
        // T·∫°o link ƒë·∫øn tin nh·∫Øn g·ªëc v·ªõi ID l√† ph·∫ßn clickable
        output += `${entry.details} (id[${id}](${entry.chatLink}))\n`;
      }
    });
    output += '\n';
  } else {
    output += "*Â∑≤ÂÖ•Ë¥¶*(0Á¨î):\n\n";
  }
  
  // Payments section
  if (jsonData.paymentData && jsonData.paymentData.entries && jsonData.paymentData.entries.length > 0) {
    const paymentCount = jsonData.paymentData.totalCount || jsonData.paymentData.entries.length;
    output += `*Â∑≤‰∏ãÂèë* (${paymentCount}Á¨î):\n`;
    
    // Format giao d·ªãch v·ªõi ID v√† link
    jsonData.paymentData.entries.forEach((entry) => {
      // D√πng k√Ω hi·ªáu ! tr∆∞·ªõc ID c·ªßa payment
      // S·ª≠ d·ª•ng ID t·ª´ entry thay v√¨ t·∫°o ID m·ªõi
      const id = `!${entry.id || (entry.index + 1)}`;
      if (entry.messageId && entry.chatLink) {
        // T·∫°o link ƒë·∫øn tin nh·∫Øn g·ªëc v·ªõi ID l√† ph·∫ßn clickable
        output += `${entry.details} ([${id}](${entry.chatLink}))\n`;
      }
    });
    output += '\n';
  } else {
    output += "*Â∑≤‰∏ãÂèë*(0Á¨î):\n\n";
  }
  output += `ÊÄªÂÖ•Ê¨æüí∞: ${formatSmart(parseFloat(jsonData.totalAmount) || 0, numberFormat)}\n`;
  // Rate information
  const rateInfo = `Ë¥πÁéáÔºö ${jsonData.rate}\nÊ±áÁéáÔºö ${jsonData.exchangeRate}\n`;
 
  // Th√™m v√≠ d·ª• n·∫øu c√≥
  let rateInfoWithExample = rateInfo;
  if (jsonData.example) {
    rateInfoWithExample += `\n‰æãÂ¶Ç: 100000 = ${formatSmart(parseFloat(jsonData.example) || 0, numberFormat)} ${jsonData.currencyUnit || 'USDT'}`;
  }
  
  output += `${rateInfoWithExample}\n`;
  
  // Summary section
  output += `Â∫î‰∏ãÂèë : ${formatSmart(parseFloat(jsonData.totalUSDT) || 0, numberFormat)}  ${jsonData.currencyUnit || 'USDT'}\n`;
  output += `Â∑≤‰∏ãÂèë : ${formatSmart(parseFloat(jsonData.paidUSDT) || 0, numberFormat)}  ${jsonData.currencyUnit || 'USDT'}\n`;
  output += `Êú™‰∏ãÂèë : ${formatSmart(parseFloat(jsonData.remainingUSDT) || 0, numberFormat)}  ${jsonData.currencyUnit || 'USDT'}`;
  
  // Cards section (if present)
  if (jsonData.cards && jsonData.cards.length > 0) {
    output += `\nÂç°È¢ùÂ∫¶ üí≥:\n${jsonData.cards.join("\n")}`;
  }
  
  return output;
};

module.exports = {
  formatSmart,
  formatNumberWithCommas,
  formatRateValue,
  isMathExpression,
  isSingleNumber,
  isTrc20Address,
  formatTelegramMessage,
  formatDateUS,
  formatTimeString,
  getUserNumberFormat,
  getGroupNumberFormat
}; 