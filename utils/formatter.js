/**
 * ƒê·ªãnh d·∫°ng s·ªë th√¥ng minh: kh√¥ng c√≥ d·∫•u ph·∫©y ph·∫ßn ngh√¨n, d·∫•u ch·∫•m ph·∫ßn th·∫≠p ph√¢n
 * @param {Number} num - S·ªë c·∫ßn ƒë·ªãnh d·∫°ng
 * @returns {String} - Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng
 */
const formatSmart = (num) => {
  const floorVal = Math.floor(Math.abs(num));
  const fraction = Math.abs(num) - floorVal;
  
  if (fraction < 1e-9) {
    // S·ªë nguy√™n: ch·ªâ hi·ªÉn th·ªã s·ªë kh√¥ng c√≥ ƒë·ªãnh d·∫°ng
    return Math.round(num).toString();
  } else {
    // S·ªë th·∫≠p ph√¢n: hi·ªÉn th·ªã v·ªõi 2 ch·ªØ s·ªë sau d·∫•u ch·∫•m
    return num.toFixed(2);
  }
};

/**
 * ƒê·ªãnh d·∫°ng gi√° tr·ªã t·ª∑ l·ªá (rate)
 * @param {Number} num - S·ªë c·∫ßn ƒë·ªãnh d·∫°ng
 * @returns {String} - Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng v·ªõi 2 ch·ªØ s·ªë th·∫≠p ph√¢n
 */
const formatRateValue = (num) => {
  // ƒê·∫£m b·∫£o num l√† s·ªë
  num = parseFloat(num);
  if (isNaN(num)) {
    return "0.00";
  }
  
  // Lu√¥n hi·ªÉn th·ªã 2 ch·ªØ s·ªë th·∫≠p ph√¢n
  return num.toFixed(2);
};

/**
 * Ki·ªÉm tra xem chu·ªói c√≥ ph·∫£i bi·ªÉu th·ª©c to√°n h·ªçc h·ª£p l·ªá kh√¥ng
 * @param {String} msg - Chu·ªói c·∫ßn ki·ªÉm tra
 * @returns {Boolean} - true n·∫øu l√† bi·ªÉu th·ª©c to√°n h·ªçc
 */
const isMathExpression = (msg) => {
  const mathRegex = /^[0-9+\-*/().\s]+$/;
  return mathRegex.test(msg);
};

/**
 * Ki·ªÉm tra xem chu·ªói c√≥ ph·∫£i l√† m·ªôt s·ªë ƒë∆°n gi·∫£n kh√¥ng
 * @param {String} msg - Chu·ªói c·∫ßn ki·ªÉm tra
 * @returns {Boolean} - true n·∫øu l√† s·ªë ƒë∆°n gi·∫£n
 */
const isSingleNumber = (msg) => {
  const numberRegex = /^-?\d+(\.\d+)?$/;
  return numberRegex.test(msg.trim());
};

/**
 * Ki·ªÉm tra xem chu·ªói c√≥ ph·∫£i l√† ƒë·ªãa ch·ªâ TRC20 h·ª£p l·ªá kh√¥ng
 * @param {String} str - Chu·ªói c·∫ßn ki·ªÉm tra
 * @returns {Boolean} - true n·∫øu l√† ƒë·ªãa ch·ªâ TRC20 h·ª£p l·ªá
 */
const isTrc20Address = (str) => {
  const re = /^T[1-9A-Za-z]{33}$/;
  return re.test(str);
};

/**
 * T·∫°o tin nh·∫Øn telegram v·ªõi ƒë·ªãnh d·∫°ng markdown
 * @param {Object} jsonData - D·ªØ li·ªáu c·∫ßn format
 * @returns {String} - Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng
 */
const formatTelegramMessage = (jsonData) => {
  let output = '';
  
  // Date header (bold)
  output += `*üßß‰ªäÊó•ÊòØ ${jsonData.date} üßß*\n`;
  
  if (jsonData.deposits && jsonData.deposits.trim() !== '') {
    output += "‰ªäÊó•ÂÖ•Ê¨æ:\n";
    output += `\`\`\`\n${jsonData.deposits}\n\`\`\``;
  } else {
    output += "‰ªäÊó•ÂÖ•Ê¨æ: Ê≤°Êúâ\n\n";
  }
  
  // Payments section
  if (jsonData.payments && jsonData.payments.trim() !== '') {
    output += "‰ªäÊó•‰∏ãÂèë:\n";
    output += `\`\`\`\n${jsonData.payments}\n\`\`\``;
  } else {
    output += "‰ªäÊó•‰∏ãÂèë: Ê≤°Êúâ\n\n";
  }
  
  // Rate information
  const rateInfo = `Ë¥πÁéá=${jsonData.rate}|üí±ÂÖ•Ê¨æÊ±áÁéá=${jsonData.exchangeRate}`;
  
  // Th√™m v√≠ d·ª• n·∫øu c√≥
  let rateInfoWithExample = rateInfo;
  if (jsonData.example) {
    rateInfoWithExample += `\n‰æãÂ≠ê: 100.000=${jsonData.example} ${jsonData.currencyUnit || 'USDT'}`;
  }
  
  output += `\`\`\`\n${rateInfoWithExample}\n\`\`\``;
  
  // Summary section (bold)
  output += `*‰ªäÊó•ÂÖ•Ê¨æÂêàËÆ° üí∞: ${jsonData.totalAmount}*\n`;
  output += `*ÂÖ•Ê¨æ ${jsonData.currencyUnit || 'USDT'} ÂêàËÆ°: ${jsonData.totalUSDT}*\n`;
  output += `*Âá∫Ê¨æ ${jsonData.currencyUnit || 'USDT'} ÂêàËÆ°: ${jsonData.paidUSDT}*\n`;
  output += `*ÂΩìÂâç${jsonData.currencyUnit || 'USDT'} Ââ©‰ΩôÂêàËÆ°: ${jsonData.remainingUSDT}*üíé`;
  
  // Cards section (if present)
  if (jsonData.cards && jsonData.cards.length > 0) {
    output += `\n Âç°È¢ùÂ∫¶ üí≥:\n\`\`\`\n${jsonData.cards.join("\n")}\`\`\``;
  }
  
  return output;
};

module.exports = {
  formatSmart,
  formatRateValue,
  isMathExpression,
  isSingleNumber,
  isTrc20Address,
  formatTelegramMessage
}; 